// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static int heap_base_address;
    static Array freeList;
    static int next;
    static int length;

    /** Initializes the class. */
    function void init() {
        

        let ram = 0;
        let heap_base_address = 2048;
        let freeList = heap_base_address;
        let length = 0;
        let next = 1;
        let freeList[length] = 14335; 
        let freeList[next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) 
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) 
    {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

    	var int size_to_find;
    	var Array block;
    	var Array previous_block;
    	var int new_location;
    	let size_to_find = size + 1; //is this the right size?
    	let previous_block = null;

    	while((~(freeList = null)) & (freeList[length] < size_to_find))
    	{
    		let previous_block = freeList;
    		let freeList = freeList[next]; 
    	}
    	
    	if (freeList = null)
    	{
    		return -1;
    	}
    	
		if (freeList[length] = size_to_find)
		{
			if (previous_block = null)
			{
				let block = freeList;
				let freeList = freeList[next];
				return block + 1;
			}
			else
			{
				let previous_block[next] = freeList[next];
				let block = freeList;
				let freeList = freeList[next];
				return block + 1;
			}
		}
		else
		{
			let block = freeList + freeList[length] - size_to_find;
			let block[length] = size_to_find;
			let freeList[length] = freeList[length] - size_to_find;
			return block + 1;
		}
    
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) 
    {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        let o[length] = freeList;
        let freeList = o - 1;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) 
    {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.

        var int counter;
        var int max_num;
        let counter = 0;
        let max_num = o[length];

        while(counter < o[length])
        {
        	if (o[counter] > max_num)
        	{
        		let max_num = o[counter];
        	}
        	let counter = counter + 1;
        }
        return max_num;
    }
}

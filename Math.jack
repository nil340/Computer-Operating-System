// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        
        /** Initializes the library. */
        //static int divide_calc_register;
        static int divide_calc_register;
        static Array two_in_power_of;

        function void init() 
        {
        	let two_in_power_of = Array.new(16);
        	let two_in_power_of[0] = 1;
	        let two_in_power_of[1] = 2;
	        let two_in_power_of[2] = 4;
	        let two_in_power_of[3] = 8;
	        let two_in_power_of[4] = 16;
	        let two_in_power_of[5] = 32;
	        let two_in_power_of[6] = 64;
	        let two_in_power_of[7] = 128;
	        let two_in_power_of[8] = 256;
	        let two_in_power_of[9] = 512;
	        let two_in_power_of[10] = 1024;
	        let two_in_power_of[11] = 2048;
	        let two_in_power_of[12] = 4096;
	        let two_in_power_of[13] = 8192;
	        let two_in_power_of[14] = 16384;
	        let two_in_power_of[15] = 16384 + 16384; // not enough bits to write 32768
	        return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) 
        {
        	if(x > 0)
        	{
        		return x;
        	}
        	return -x;
        }

        function boolean check_ith_bit(int y, int ith_bit)
        {
        	return ((y & ith_bit) = 0);
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum, shiftedx, counter;
            let sum = 0;
            let shiftedx = x;
            let counter = 0;
            while(counter < 16)
            {
            	if(~(Math.check_ith_bit(y,two_in_power_of[counter])))
            	{
            		let sum = sum + shiftedx;
            	}
            	let shiftedx = shiftedx + shiftedx;
            	let counter = counter + 1;
            }
            return sum;
        }

        function int divide_recursion(int x, int y) 
        {   
        	var int q;
            if((y > x) | (y < 0))
            {
            	return 0;
            }
            
            let q = Math.divide_recursion(x, (y+y));
            
            if((x - divide_calc_register) < y)
            {
            	return (q+q);
            }

         	let divide_calc_register = divide_calc_register + y;
            return ((q+q)+1);
        }


        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) 
        {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int calc; 
            let divide_calc_register = 0;
            let calc = Math.divide_recursion(Math.abs(x), Math.abs(y));
            
            if ((x > 0 & y < 0) | (x < 0 & y > 0))
            {
            	return -calc;
            }
            return calc;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x)
        {
            // This should be implemented without using division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y

            var int y, counter, calc;
            let y = 0;
            let counter = 7; // the book says n is the number of bits in x therefore counter = 16/2 - 1 = 7

            while(counter > -1)
            {
            	let calc = Math.multiply((y + two_in_power_of[counter]),(y + two_in_power_of[counter]));
            	if((~(calc > x)) & (calc > 0))
            	{
            		let y = y + two_in_power_of[counter];
            	}
            	let counter = counter - 1;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) 
        {
        	if (a > b)
        	{
        		return a;
        	}
        	return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) 
        {
        	if(a > b)
        	{
        		return b;
        	}
        	return a;
        }
}
